<!--Import jQuery before materialize.js-->
<script type="text/javascript" src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
<!-- Compiled and minified JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js"></script>
<script>
    var canvas, ctx, flag = false,
            prevX = 0,
            currX = 0,
            prevY = 0,
            currY = 0,
            dot_flag = false;

    var x = "black",
            y = 5;
    // Open a websocket
    var ws = new WebSocket("ws://localhost/ws");

    var data;

    function init() {
        canvas = document.getElementById('myCanvas');
        ctx = canvas.getContext("2d");
        w = canvas.width;
        h = canvas.height;

        // Set the canvas data
        clearCanvas(ctx);

        data = ctx.getImageData(0, 0, 500, 500).data;

        canvas.addEventListener("mousemove", function (e) {
            findxy('move', e)
        }, false);
        canvas.addEventListener("mousedown", function (e) {
            findxy('down', e)
        }, false);
        canvas.addEventListener("mouseup", function (e) {
            findxy('up', e)
        }, false);
        canvas.addEventListener("mouseout", function (e) {
            findxy('out', e)
        }, false);
    }

    function color(obj) {
        switch (obj.id) {
            case "green":
                x = "green";
                break;
            case "blue":
                x = "blue";
                break;
            case "red":
                x = "red";
                break;
            case "yellow":
                x = "yellow";
                break;
            case "orange":
                x = "orange";
                break;
            case "black":
                x = "black";
                break;
            case "white":
                x = "white";
                break;
        }
        if (x == "white") y = 14;
        else y = 5;

    }

    function draw() {
        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(currX, currY);
        ctx.strokeStyle = x;
        ctx.lineWidth = y;
        ctx.stroke();
        ctx.closePath();
    }

    function findxy(res, e) {
        if (res == 'down') {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.offsetLeft;
            currY = e.clientY - canvas.offsetTop;

            flag = true;
            dot_flag = true;
            if (dot_flag) {
                ctx.beginPath();
                ctx.fillStyle = x;
                ctx.fillRect(currX, currY, 2, 2);
                ctx.closePath();
                dot_flag = false;
            }
        }
        if (res == 'up' || res == "out") {
            if(res == 'up') {
                findChange(ctx.getImageData(0, 0, 500, 500).data);
            }
            flag = false;
        }

        if (res == 'move') {
            if (flag) {
                prevX = currX;
                prevY = currY;
                currX = e.clientX - canvas.offsetLeft;
                currY = e.clientY - canvas.offsetTop;
                draw();
            }
        }
    }

    function pixel(x, y, r, g, b) {
        this.x = x;
        this.y = y;
        this.color = (r << 16) + (g << 8) + b;
    }

    ws.onmessage = function(event) {
        var canvasUpdates = JSON.parse(event.data);

        var currentCanvas = ctx.getImageData(0, 0, 500, 500);

        for(i = 0; i < canvasUpdates.length; i++) {
            var x = canvasUpdates[i].x;
            var y = canvasUpdates[i].y;
            currentCanvas.data[((500 * y) + x) * 4] = (canvasUpdates[i].color >>> 16) & 0x00FF;
            currentCanvas.data[((500 * y) + x) * 4 + 1] = (canvasUpdates[i].color >>> 8) & 0x0000FF;
            currentCanvas.data[((500 * y) + x) * 4 + 2] = canvasUpdates[i].color & 0x000000FF;
        }

        ctx.putImageData(currentCanvas,0, 0);
        console.log("Got Message!")
    };

    function findChange(newData) {
        // Create a place to store the pixels
        var pixels = [];
        // Loop over all of the pixels based on x and y coordinates
        for(var y = 0; y < 500; y++) {
            // Loop over each column
            for(var x = 0; x < 500; x++) {
                // Get the old and new pixel data
                var nred = newData[((500 * y) + x) * 4];
                var ngreen = newData[((500 * y) + x) * 4 + 1];
                var nblue = newData[((500 * y) + x) * 4 + 2];
                var ored = data[((500 * y) + x) * 4];
                var ogreen = data[((500 * y) + x) * 4 + 1];
                var oblue = data[((500 * y) + x) * 4 + 2];
                // Check if this pixel has changed
                if((nred != ored) || (ngreen != ogreen) || (nblue != oblue)) {
                    console.log("CHANGE!");
                    pixels.push(new pixel(x,y,nred,ngreen,nblue));
                }
                if(pixels.length == 1500) {
                    // send out the changes
                    ws.send(JSON.stringify(pixels));
                    // clear the array
                    pixels = [];
                }
            }
        }
        data = newData;
        if(pixels.length != 0) {
            ws.send(JSON.stringify(pixels));
        }
    }
    
    function clearCanvas(ctx) {
        // Get the canvas data
        var canvasData = ctx.getImageData(0, 0, 500, 500);
        // Change the requested pixels
        for(var i = 0, n = canvasData.data.length; i < n; i += 4) {
            canvasData.data[i] = 255;
            canvasData.data[i + 1] = 255;
            canvasData.data[i + 2] = 255;
            canvasData.data[i + 3] = 255;
        }
        // Update the canvas
        ctx.putImageData(canvasData, 0, 0);
    }
</script>